require 'digest/sha1'
class User < ActiveRecord::Base
  has_many :reservations
  has_many :events #, :through => :reservations
  has_many :settings

  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  
  has_and_belongs_to_many :roles
  attr_protected          :roles
  
  # ---------------------------------------
  
  # Virtual attribute for the unencrypted password
  attr_accessor                     :password

  validates_presence_of             :login, :email
  validates_presence_of             :password,                          :if => :password_required?
  validates_presence_of             :password_confirmation,             :if => :password_required?
  validates_length_of               :password,      :within => 4..40,   :if => :password_required?
  validates_confirmation_of         :password,                          :if => :password_required?
  validates_length_of               :login,         :within => 3..40
  validates_length_of               :email,         :within => 3..100
  validates_uniqueness_of           :login, :email,                     :case_sensitive => false
  before_save                       :encrypt_password
  
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  # attr_accessible :login, :email, :password, :password_confirmation
  # Rails 2.0 has an automatic hijack protector for the preceeding line.

  # See if the user has a specific role in the view.
  def has_any_role?(*roles_in_question)
    roles_in_question.any?{|role_in_question|
      self.has_role?(role_in_question)
    }
  end 
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always (disabled -JDP)
  def has_role?(role_in_question)
    @_list ||= self.roles.collect(&:name)
    return true if @_list.include?(role_in_question)
    (@_list.include?(role_in_question.to_s) )
  end

   # if the user has an event, return true.
  def has_any_event?
    self.has_any?(event)
  end

  def self.find_owner_email
    find_by_id(Event.user_id).email
  end

  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  def self.authenticate(login, password)
    u = find_by_login(login) # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  # Encrypts some data with the salt.
  def self.encrypt(password, salt)
    Digest::SHA1.hexdigest("--#{salt}--#{password}--")
  end

  # Encrypts the password with the user salt
  def encrypt(password)
    self.class.encrypt(password, salt)
  end

  def authenticated?(password)
    crypted_password == encrypt(password)
  end

  def remember_token?
    remember_token_expires_at && Time.now.utc < remember_token_expires_at 
  end

  # These create and unset the fields required for remembering users between browser closes
  def remember_me
    remember_me_for 2.weeks
  end

  def remember_me_for(time)
    remember_me_until time.from_now.utc
  end

  def remember_me_until(time)
    self.remember_token_expires_at = time
    self.remember_token            = encrypt("#{email}--#{remember_token_expires_at}")
    save(false)
  end

  def forget_me
    self.remember_token_expires_at = nil
    self.remember_token            = nil
    save(false)
  end

  protected
    # before filter 
    def encrypt_password
      return if password.blank?
      self.salt = Digest::SHA1.hexdigest("--#{Time.now.to_s}--#{login}--") if new_record?
      self.crypted_password = encrypt(password)
    end
      
    def password_required?
      crypted_password.blank? || !password.blank?
    end
    
    
end
